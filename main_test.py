{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyTorch recurrent neural networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook demosntrates the three most common types of recurrent neural networks. \n",
    "Namely, we focus on: \n",
    "    Simple recurrent neural network   (RNN) \n",
    "    Gated recurrent units             (GRU)\n",
    "    Long short term memory netowrk    (LSTM) \n",
    "\n",
    "The models are nicely demonstrated and explained in the following post:  \n",
    "http://colah.github.io/posts/2015-08-Understanding-LSTMs/\n",
    "\n",
    "The models are trained on a one dimensional time series of a noisy sin-wave. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load packages and dependencies\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import torch\n",
    "%matplotlib inline\n",
    "from torch import nn\n",
    "from torch.autograd import Variable\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GPU is available:  True\n"
     ]
    }
   ],
   "source": [
    "use_gpu=torch.cuda.is_available()\n",
    "print(\"GPU is available: \",  use_gpu)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parameters\n",
    "look_back=200        # historic time window\n",
    "look_forward=100    # prediction time horizont\n",
    "hidden_size=130       # dimension of hidden variable h\n",
    "num_layer=3          # number of LSTM layers\n",
    "dropout=   0.3      # dropout rate after each LSTM layer\n",
    "\n",
    "epochs=1000\n",
    "\n",
    "sample_size=3000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# generate data (noisy sin waves)\n",
    "\n",
    "def sine_2(X, signal_freq=60.):\n",
    "\n",
    "    return (np.sin(2 * np.pi * (X) / signal_freq) + np.sin(4 * np.pi * (X) / signal_freq)) / 2.0\n",
    "\n",
    "def noisy(Y, noise_range=(-0.05, 0.05)):\n",
    "    noise = np.random.uniform(noise_range[0], noise_range[1], size=Y.shape)\n",
    "    return Y + noise\n",
    "\n",
    "def sample(sample_size=sample_size):\n",
    "    random_offset = np.random.randint(0, sample_size)\n",
    "    X = np.arange(sample_size)\n",
    "    Y = noisy(sine_2(X + random_offset)).astype('float32')\n",
    "    return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dataset=sample()\n",
    "train_size = int(len(dataset) * 0.7)\n",
    "test_size = len(dataset) - train_size\n",
    "\n",
    "plt.plot(np.arange(train_size), dataset[:train_size], 'g', label=\"train\") \n",
    "plt.plot(np.arange(train_size,len(dataset)), dataset[train_size:], 'r', label='test')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize data to [0, 1]\n",
    "\n",
    "max_value = np.max(dataset)\n",
    "min_value = np.min(dataset)\n",
    "scalar = max_value - min_value\n",
    "dataset = list(map(lambda x: (x-min_value) / scalar, dataset))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_dataset(dataset, look_back, look_forward):\n",
    "    dataX, dataY = [], []\n",
    "    for i in range(len(dataset) - look_back- look_forward):\n",
    "        a = dataset[i:(i + look_back)]\n",
    "        dataX.append(a)\n",
    "        dataY.append(dataset[i + look_back:(i + look_back+look_forward)])\n",
    "    return np.array(dataX), np.array(dataY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "data_X, data_Y = create_dataset(dataset, look_back, look_forward)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Slit data to train and test data\n",
    "train_X = data_X[:train_size]\n",
    "train_Y = data_Y[:train_size]\n",
    "test_X = data_X[train_size:]\n",
    "test_Y = data_Y[train_size:]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([2100, 1, 200])\n",
      "torch.Size([2100, 1, 100])\n",
      "torch.Size([600, 1, 200])\n",
      "torch.Size([600, 1, 100])\n"
     ]
    }
   ],
   "source": [
    "# Convert numpy array to PyTorch tensor\n",
    "train_X = train_X.reshape(-1, 1, look_back)\n",
    "train_Y = train_Y.reshape(-1, 1, look_forward)\n",
    "test_X = test_X.reshape(-1, 1, look_back)\n",
    "test_Y = test_Y.reshape(-1, 1, look_forward)\n",
    "\n",
    "train_x = torch.from_numpy(train_X).cuda()\n",
    "train_y = torch.from_numpy(train_Y).cuda()\n",
    "test_x = torch.from_numpy(test_X).cuda()\n",
    "test_y = torch.from_numpy(test_Y).cuda()\n",
    "\n",
    "print(train_x.size())\n",
    "print(train_y.size())\n",
    "print(test_x.size())\n",
    "print(test_y.size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Neural netowrk \n",
    "\n",
    "class model(nn.Module):\n",
    "    def __init__(self, module, input_size, hidden_size, output_size, num_layers=num_layer, dropout=dropout):\n",
    "        if module==\"LSTM\":\n",
    "            super(model, self).__init__()    \n",
    "            self.rnn = nn.LSTM(input_size, hidden_size, num_layers, dropout=dropout) # rnn\n",
    "            self.reg = nn.Linear(hidden_size, output_size) \n",
    "\n",
    "        elif module==\"RNN\":\n",
    "            super(model, self).__init__()    \n",
    "            self.rnn = nn.RNN(input_size, hidden_size, num_layers, dropout=dropout) # rnn\n",
    "            self.reg = nn.Linear(hidden_size, output_size) \n",
    "        elif module==\"GRU\":\n",
    "            super(model, self).__init__()    \n",
    "            self.rnn = nn.GRU(input_size, hidden_size, num_layers, dropout=dropout) # rnn\n",
    "            self.reg = nn.Linear(hidden_size, output_size) \n",
    "        else:\n",
    "            print(\"No valid model\")\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x, _ = self.rnn(x) # (seq, batch, hidden)\n",
    "        s, b, h = x.shape\n",
    "        x = x.view(s*b, h)\n",
    "        x = self.reg(x)\n",
    "        x = x.view(s, b, -1)\n",
    "        return x\n",
    "    \n",
    "    def predict(self, inp, input_size, future=0):\n",
    "        outputs=[]\n",
    "        for i in range(future):# if we should predict the future\n",
    "            x, _ = self.rnn(inp) # (seq, batch, hidden)\n",
    "            s, b, h = x.shape\n",
    "            x = x.view(s*b, h)\n",
    "            x = self.reg(x)\n",
    "            x = x.view(s, b, -1)\n",
    "            outputs += [x]\n",
    "            inp[:,:,:(input_size-1)]=inp[:,:,1:]\n",
    "            inp[:,:,-1]=x[-1].item()\n",
    "        outputs = torch.stack(outputs, 1).squeeze(2)\n",
    "        return outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'LSTM': model(\n",
      "  (rnn): LSTM(200, 130, num_layers=3, dropout=0.3)\n",
      "  (reg): Linear(in_features=130, out_features=100, bias=True)\n",
      "), 'RNN': model(\n",
      "  (rnn): RNN(200, 130, num_layers=3, dropout=0.3)\n",
      "  (reg): Linear(in_features=130, out_features=100, bias=True)\n",
      "), 'GRU': model(\n",
      "  (rnn): GRU(200, 130, num_layers=3, dropout=0.3)\n",
      "  (reg): Linear(in_features=130, out_features=100, bias=True)\n",
      ")}\n"
     ]
    }
   ],
   "source": [
    "# initialize neural nets\n",
    "net={}\n",
    "models=['LSTM', 'RNN', 'GRU']\n",
    "optimizer={}\n",
    "for name in models:\n",
    "    net[name]=model(name, look_back, hidden_size, look_forward).cuda()\n",
    "    optimizer[name] = torch.optim.Adam(net[name].parameters(), lr=1e-2)\n",
    "\n",
    "criterion = nn.MSELoss()\n",
    "print(net)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------------------- Epoch 100 - 10.00% - Time 306.83s --------------------\n",
      "LSTM: Loss: 0.06161\n",
      "RNN: Loss: 0.07318\n",
      "GRU: Loss: 0.00290\n",
      "-------------------- Epoch 200 - 20.00% - Time 309.89s --------------------\n",
      "LSTM: Loss: 0.02711\n",
      "RNN: Loss: 0.07316\n",
      "GRU: Loss: 0.00140\n"
     ]
    }
   ],
   "source": [
    "# training \n",
    "t0= time.time()\n",
    "for e in range(epochs):\n",
    "    if (e+1) % 100 == 0: \n",
    "        dt=time.time()-t0\n",
    "        t0=dt+t0\n",
    "        print('-'* 20 + ' Epoch {} - {:.2f}% - Time {:.2f}s '.format(e+1, (e+1)/epochs*100, dt) +'-'*20)\n",
    "    var_x = Variable(train_x)\n",
    "    var_y = Variable(train_y)\n",
    "    for name in models:\n",
    "        out = net[name](var_x)\n",
    "        loss = criterion(out, var_y)\n",
    "        optimizer[name].zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer[name].step()\n",
    "        if (e+1) % 100 == 0: \n",
    "            print('{}: Loss: {:.5f}'.format(name, loss.item()))\n",
    "           \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for name in models:\n",
    "    net[name] = net[name].eval() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test={}\n",
    "test_x=Variable(test_x)\n",
    "for name in models: \n",
    "    test[name] = net[name](test_x)\n",
    "    loss = criterion(test[name], test_y)\n",
    "    print('{}: Loss: {:.5f}'.format(name, loss.item()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for name in models:\n",
    "    plt.plot( test[name].view(-1).data.cpu().numpy(), label=name)\n",
    "plt.plot(test_y.view(-1).data.cpu().numpy(), 'b', label='real')\n",
    "plt.legend(loc='best')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
